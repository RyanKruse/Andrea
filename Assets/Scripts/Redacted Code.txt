

    private void OrientateTablet(string forceOrientate)  // Parallel Code.
    {
        return;  // Removing orientation logistics.
        if (_isRejectNumPadInputs && forceOrientate == "0") return;

        // Rotate the tablet orientation. 
        if (Input.GetKeyDown("[0]") || forceOrientate != "0")
        {
            PlayAudio(_clickAudio);

            if (forceOrientate == _mainOrientation) return;

            // Define variables.
            int _tempPageIndex = _mainPageIndex;
            _mainPageIndex = 0;
            _bottomLeftTMP.text = "";
            _bottomRightTMP.text = "";
            RectTransform _rectTransform = _mainTMP.GetComponent<RectTransform>();
            _rectTransform.sizeDelta = new Vector2(_rectTransform.rect.height, _rectTransform.rect.width);

            // Vertical or horizontal orientation.
            if (_mainOrientation == "V")
            {
                _mainOrientation = "H";
                _defaultOrientation = "H";
                _rectTransform.Rotate(new Vector3(0f, 0f, -90f));
                _rectTransform.localPosition = new Vector3(_rectTransform.localPosition.y, _rectTransform.localPosition.x + 5, 0);
                _rectTransform.sizeDelta = new Vector2(_rectTransform.rect.width - 75, _rectTransform.rect.height + 75);
                if (!Networking.LocalPlayer.IsUserInVR())
                {
                    _candleGameObject.transform.Rotate(new Vector3(0f, 0f, 90f));
                }
                // _mainPageInfoTMP = _horizontalPageInfoTMP;
                // _mainPercentageInfoTMP = _horizontalPercentageInfoTMP;

            }
            else if (_mainOrientation == "H")
            {
                _mainOrientation = "V";
                _defaultOrientation = "V";
                _rectTransform.Rotate(new Vector3(0f, 0f, 90f));
                _rectTransform.localPosition = new Vector3(_rectTransform.localPosition.y - 5, _rectTransform.localPosition.x, 0);
                _rectTransform.sizeDelta = new Vector2(_rectTransform.rect.width - 75, _rectTransform.rect.height + 75);
                if (!Networking.LocalPlayer.IsUserInVR())
                {
                    _candleGameObject.transform.Rotate(new Vector3(0f, 0f, -90f));
                }
                // _mainBottomLeftTMP = _bottomLeftTMP;
                // _mainPercentageInfoTMP = _bottomRightTMP;
            }

            // Have clone mimic the main text component.
            RectTransform _rectTransformClone = _mainCloneTMP.GetComponent<RectTransform>();
            _rectTransformClone.sizeDelta = _rectTransform.sizeDelta;
            _rectTransformClone.rotation = _rectTransform.rotation;
            _rectTransformClone.localPosition = _rectTransform.localPosition;

            if (!_mainMenuGameObject.activeSelf)
            {
                _mainTMP.text = "";

                Calibrate(0);

                // Overwrites endCalibrationMemory in Calibrate().
                _endCalibrationPageIndex = Mathf.Clamp(_tempPageIndex, 0, _mainPageLength - 1);
                _isOverflowAuditDefinePage = true;
            }
        }
    }